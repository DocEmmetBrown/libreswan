#!/bin/sh

set -e

hosts=$(echo $($(dirname $0)/testing/utils/kvmhosts.sh))

# Anything matching '^____[-a-z]' is considered a command (_ denotes a
# space).

pass1help()
{
    cat <<EOF

  Use the test directories that have been modified when running and
  comparing tests:

    modified
	apply operation to modified tests (default is all tests)

  When comparing results, specify the baseline directory to compare
  against (default is Makefile.inc.local:KVM_BASELINE):

    baseline
	compare test results against baseline
    baseline-passed
	compare test results against baseline tests that passed
    baseline-failed
	compare test results against baseline tests that failed
    --baseline <dir>
	specify baseline directory to compare against
    --baseline-passed <dir>
	specify baseline directory to compare against
    --baseline-failed
	specify baseline directory to compare against

Utilities:

  sh <host> [ <command> ]
	start a shell on <host> which can be ${hosts}

EOF
}

pass1=$(pass1help | awk '/^    [-a-z]/ { printf " %s ", $1 }' ; echo ${host})

pass2help()
{
    cat <<EOF

  Build / install the test domains:

    install
	install libreswan onto the build domains
    upgrade
	upgrade the base domains
    transmogrify
	transmogrify the base domains
    clean
	clean the test environment (delete test and build domains and build trees)
    keys
	update the keys used for testing

  Run Tests:

    check [ <test-directory> ... ]
        run the testsuite
    recheck [ <test-directory> ... ]
	re-run the testsuite
    diffs [ <test-directory> ... ]
	show differences for the specified tests
    results [ <test-directory> ... ]
	show differences for the specified tests
    check-clean
	delete the test results (leave the build trees and domains alone)

  Update the test results (and GIT repository containing the tests):

    patch [ <test-directory> ... ]
	apply test differences to the specified test directories (or all
	test directories)
    add [ <test-directory> ... ]
	<<git add>> the specified test directories (or all test
	directories)
    commit [ <test-directory> ... ]
	commit added changes

  Manipulate the kvmrunner process:

    status
	report the status of the running test
    kill
	kill the running testsuite

  Clean up the test environment

    uninstall
	delete the build and test domains
	(but leave the build trees and base domains alone)
    downgrade
	delete the build and test domains
	remove any updates to the base domains
    purge
	delete base, build and test domains
	delete any build trees
    demolish
	delete all domains and all builds
    shutdown
	shutdown the domains

EOF
}

pass2=$(pass2help | awk '/^    [-a-z]/ { printf " %s ", $1 }')

# translate ../../../kvm ... into ./kvm ...

if test $(realpath $(dirname $0)) != $(realpath ${PWD}) ; then
    if test $# -eq 0 ; then
	set -- check ${PWD}
    else
	declare -a args
	i=0
	for arg in "$@" ; do
	    if test -d "${arg}" ; then
		dir=true
		args[$i]=$(realpath ${arg})
	    elif test "${arg}" = check ; then
		check=true
		args[$i]="${arg}"
	    else
		args[$i]="${arg}"
	    fi
	    i=$((i + 1))
	done
	set -- "${args[@]}"
    fi
    cd $(dirname $0)
    echo "$@"
fi

if test $# -eq 0; then
    cat <<EOF
Usage:

   <operation> <operation> ... <test-directory> <test-directory> ...

Where operations are:
EOF
    pass1help
    pass2help
cat <<EOF
To enable completion, add:
  complete -o filename -C './kvm' ./kvm
to .bashrc
EOF
EOF
    exit 1
fi

# Invoked by completer with:
#
#   $0 <command==$0> <word> <previous>?

if test "$1" == $0 -a $# -eq 3 ; then
    command=$1
    word=$2
    previous=$3
    # hack to detect first vs later argument
    if test "${previous}" == "${command}" ; then
	# first command
	compgen -W "${pass1} ${pass2}" "${word}" | sort
    elif test "${previous}" == sh ; then
	# pass 1 command
	compgen -W "${hosts}" "${word}"
    else
	# either <command> or <directory>
	compgen -o plusdirs -W "${pass2}" "${word}"
    fi
    exit 0
fi

# accumulate pass 2 commands; execute pass 1 commands immediately

declare -a ops
modified=
baseline=
__baseline=$(sed -n -e 's/^KVM_BASELINE[ ]*=[ ]*/--baseline /p' Makefile.inc.local)
prefix=$(sed -n -e 's/^KVM_PREFIXES[ ]*=[ ]*\([^ ]*\).*/\1/p' Makefile.inc.local)
# without the eval quotes get quotes get quotes; anyone know why?
__test_flags=$(eval echo $(sed -n -e 's/^KVM_TEST_FLAGS[ ]*=[ ]*//p' Makefile.inc.local))
testingdir=$(sed -n -e 's/^KVM_TESTINGDIR[ ]*=[ ]*\([^ ]*\).*/\1/p' Makefile.inc.local)

i=0
while test $# -gt 0 ; do
    case " ${pass2} " in
	*" $1 "* )
	    # accumulate pass2 commands
	    ops[$i]="$1" ; i=$((i + 1))
	    ;;
	* )
	    # must be a pass1 command
	    case "$1" in

		--baseline* )
		    baseline=$(expr $1 : '--\(.*\)')
		    shift
		    __baseline="--baseline $1"
		    ;;

		# aliases for pass2 commands
		diff )   ops[$i]=diffs ;   i=$((i + 1)) ;;
		result ) ops[$i]=results ; i=$((i + 1)) ;;
		test   ) ops[$i]=check ;   i=$((i + 1)) ;;
		retest ) ops[$i]=recheck ; i=$((i + 1)) ;;
		test-clean ) ops[$i]=check-clean ; i=$((i + 1)) ;;

		sh )
		    shift
		    host=${prefix}$1 ; shift
		    echo "Connecting to ${host}" 1>&2
		    exec testing/utils/kvmsh.py ${host} "$@"
		    ;;

		# wrappers
		modified )
		    modified=$(git status testing/pluto/ \
				   | awk '/(modified|deleted|renamed):/ { print $NF }' \
				   | grep '/.*/.*/' \
				   | cut -d/ -f1-3 \
				   | sort -u)
		    if test -z "${modified}" ; then
			echo "no modified tests" 1>&2
			exit 1
		    fi
		    ;;

		baseline | baseline-passed | baseline-failed )
		    if test -z "${__baseline}" ; then
			echo "no KVM_BASELINE" 1&2
			exit 1
		    fi
		    baseline=$1
		    ;;

		* ) # either a directory; or a hostname
		    case " ${hosts} " in

			*" $1 "* )
			    host=${prefix}$1 ; shift
			    echo "Connecting to ${host}" 1>&2
			    exec testing/utils/kvmsh.py ${host} "$@"
			    ;;

			* ) # check first trailing argument is a directory
			    if test ! -d "$1" ; then
				if test -z "${ops[*]}" ; then
				    echo "unknown command: $1" 1>&2
				else
				    echo "not a directory: $1" 1>&2
				fi
				exit 1
			    fi
			    break
		    esac
	    esac
	    ;;
    esac
    shift
done

if test -n "${modified}" ; then
    if test -z "${ops[*]}" ; then
	echo "${modified}"
	exit 0
    elif test $# -ne 0 ; then
	echo "both modified and tests specified" 1>&2
	exit 1
    fi
    set ${modified}
elif test $# -eq 0 ; then
    set ${testingdir:-testing}/pluto
fi

if test -z "${ops[*]}" ; then
    echo "nothing to do!" 1>&2
    exit 1
fi

results_command()
{
    if test -n "${baseline}" ; then
	./testing/utils/kvmresults.py ${__test_flags} ${__baseline} "$@" \
	    | grep --line-buffered -v -e baseline:untested \
	    | grep --line-buffered -e ${baseline}
    else
	./testing/utils/kvmresults.py ${__test_flags} "$@"
	status=$?
    fi
}

diffs_command()
{
    if test -n "${baseline}" ; then
	./testing/utils/kvmresults.py ${__test_flags} ${__baseline} --stats none "$@" \
	    | grep --line-buffered -v -e baseline:untested \
	    | grep --line-buffered -e "${baseline}" \
	    | while read test eol ; do
	    ./testing/utils/kvmresults.py --stats none --print diffs ${test}
	done
    else
	./testing/utils/kvmresults.py ${__test_flags} --stats none --print diffs "$@"
	status=$?
    fi
}

# second pass
status=0
for op in "${ops[@]}" ; do
    case ${op} in

	commit ) git commit "$@" ;;
	add ) git add "$@" ;;

	kill ) gmake kvm-${op} ;;
	upgrade | clean | install | demolish | purge | uninstall | downgrade | upgrade | transmogrify | status | check-clean | shutdown )
	    echo gmake kvm-${op}
	    gmake kvm-${op} || exit $?
	    ;;
	check | recheck )
	    echo ${op}: "$@"
	    gmake kvm-${op} KVM_TESTS="$*" || exit $?
	    ;;
	diffs )
	    diffs_command "$@"
	    ;;
	results )
	    results_command "$@"
	    ;;
	patch )
	    diffs_command "$@" | patch -p1
	    ;;
	keys )
	    gmake kvm-keys-clean kvm-keys
    esac
done

exit ${status}
